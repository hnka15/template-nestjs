stages:
  - deploy

# Seta as variáveis com os dados do ambiente que está sendo feita a atualização do projeto
workflow:
  rules:
    - if: ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main' || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_REF_NAME == "main")
      variables:
        DEPLOY_VAR: 'producao'
        BRANCH_VAR: 'main'
    - if: ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "homol" || $CI_COMMIT_BRANCH == "homol" || $CI_COMMIT_REF_NAME == "homol")
      variables:
        DEPLOY_VAR: 'homologacao'
        BRANCH_VAR: 'homol'

# Seta as variáveis para uso no script
variables:
  PROJETO_DIR: '/var/www/html/$CI_PROJECT_NAME'
  GIT_REMOTE: 'git@gitlab.crea-go.org.br:portal/portal-back.git'

# Script para atualização do projeto
implanta-app:
  stage: deploy
  tags:
    # Tags configuradas nos runners
    - $DEPLOY_VAR
  only:
    # Branches que estão escutando as atualizações para sincronização com os respectivos runners
    - main
    - homol
  script:
    # Print variáveis GitLab CI
    - echo "CI_COMMIT_BRANCH= $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_REF_NAME= $CI_COMMIT_REF_NAME"
    - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME= $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - echo "CI_MERGE_REQUEST_SOURCE_BRANCH_NAME= $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    # Print variáveis
    - echo "BRANCH_VAR= $BRANCH_VAR"
    #- cd /var/www/html/repositorios
    - cd /var/www/html
    # Verificar se o diretório com o nome do projeto existe
    - |
      if [ -d "$PROJETO_DIR" ]; then
          echo "O diretório existe"
          cd "$PROJETO_DIR"
          git branch | grep $BRANCH_VAR
          BRANCH_EXISTE=$(echo $?)
          if [ $BRANCH_EXISTE -eq 0 ]; then
              git fetch
              git pull origin $BRANCH_VAR
          fi
      else
          echo "Diretório não existe..."
          git clone -b $BRANCH_VAR --single-branch $GIT_REMOTE $CI_PROJECT_NAME
      fi
after_script:
  # Executa após script de atualização do projeto
  - |
    if [ -d "$PROJETO_DIR" ]; then
        echo "O diretório $PROJETO_DIR existe"
        cd "$PROJETO_DIR"

        echo "Usuário atual:"
        whoami

        echo "Diretório atual:"
        pwd

        echo "PATH atual:"
        echo ${PATH}

        echo "Localização do npm:"
        which npm

        echo "Detalhes do npm:"
        ls -lh $(which npm)

        echo "Iniciando o npm install"
        npm install

        echo "Finalizando o npm install"

        echo "Iniciando o build"
        npm run build

        echo "Finalizando o build"
    else
        echo "Diretório $PROJETO_DIR não existe para o build..."
    fi
